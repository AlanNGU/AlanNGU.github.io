<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="alanngu.github.io/"/>
  <updated>2020-05-09T07:49:17.892Z</updated>
  <id>alanngu.github.io/</id>
  
  <author>
    <name>Alan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis入门-初识mybatis</title>
    <link href="alanngu.github.io/2020/05/06/mybatis%E5%85%A5%E9%97%A8-%E5%88%9D%E8%AF%86mybatis/"/>
    <id>alanngu.github.io/2020/05/06/mybatis%E5%85%A5%E9%97%A8-%E5%88%9D%E8%AF%86mybatis/</id>
    <published>2020-05-06T11:47:36.000Z</published>
    <updated>2020-05-09T07:49:17.892Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="初识MyBatis"><a href="#初识MyBatis" class="headerlink" title="初识MyBatis"></a>初识MyBatis</h3><p>mybatis是一个可以自定义SQL,存储过程和高级映射的持久层框架。之前叫做ibatis。</p><h3 id="MyBatis是什么？"><a href="#MyBatis是什么？" class="headerlink" title="MyBatis是什么？"></a>MyBatis是什么？</h3><p>学习一样技术，我们首先应该了解他能做什么，能解决什么问题。MyBatis是一个持久层的框架。持久层就是MVC模式中的dao层。负责与数据库进行交互。它可以建立数据库表和系统中的对象的一对一映射关系。这种框架我们称之为orm框架。不过MyBatis不像Hibernate那样可以自动生成sql语句，需要我们自己手写SQL语句，并且建立实体类和数据库的映射，所以MyBatis是一个半自动的持久层框架。</p><p>关于映射的含义，我们举个栗子说明一下。在数据库中有一个student表，里面有id，name，age，birthday，gender，class等字段，表中有一条数据，如下图。</p><p><img src="student_database.png" alt="student"></p><p>而系统中也需要有一个与之对应的实体类。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">Data</span></span><br><span class="line"><span class="keyword">public</span> class Student &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Integer</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学生名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Integer</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出生日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Data</span> birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Integer</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 班级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> classes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这个表中的数据，对应表中的代码的话，应该是一个Student的对象。这个对象的各个属性的值即为表中的拿一条数据。而框架通过我们的配置，将这个表中记录和这个类的对象建立一对一的关系。我们称之为映射。映射建立之后，我们可以通过操作这个对象实现对数据库的修改。这样在考虑业务逻辑的时候就可以不在考虑我们的数据库中的表是如何存储的，而是对实体对象进行操作，简化开发。</p><p>那么，MyBatis这个框架可以做什么呢？</p><p>其实很简单，无非就是对数据库的增删改查。这是每个持久层框架都应该支持的事情。SQL可以做的事情，mybatis基本上都可以做。</p><p>MyBatis如何使用，下面写一个简单SpringBoot项目演示。</p><p>首先，在pom文件中添加Mybatis相关的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时也要为项目添加web支持，坐标如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后添加springboot启动类</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@MapperScan</span>(<span class="string">"com.alan.dao"</span>)</span><br><span class="line">public class MybatisDemoApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(MybatisDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后建立Application.properties文件，添加如下配置。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.datasource</span>.driver-class-name=com<span class="selector-class">.mysql</span><span class="selector-class">.cj</span><span class="selector-class">.jdbc</span>.Driver</span><br><span class="line">spring<span class="selector-class">.datasource</span>.url=jdbc:mysql:<span class="comment">//192.168.158.129:3306/mybatisdb</span></span><br><span class="line">spring<span class="selector-class">.datasource</span>.username=root</span><br><span class="line">spring<span class="selector-class">.datasource</span>.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">spring<span class="selector-class">.datasource</span>.type=com<span class="selector-class">.alibaba</span><span class="selector-class">.druid</span><span class="selector-class">.pool</span>.DruidDataSource</span><br><span class="line"></span><br><span class="line">mybatis.type-aliases-package=com<span class="selector-class">.alan</span>.entity</span><br><span class="line">mybatis.mapper-locations=classpath:mapper<span class="comment">/*.xml</span></span><br></pre></td></tr></table></figure><p>然后我们在java目录下从创建entity，dao，service，controller包。项目结构如下图；</p><p><img src="project_stucture.png" alt="structure"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">16937756922340050L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自增主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 姓名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 年龄</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Object age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 年龄</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Object birthday;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 性别 0:男 1:女</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 班级</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String classes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略getter setter方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Student <span class="title">queryById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Student <span class="title">queryById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"studentService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ID查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">queryById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.studentDao.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"selectOne"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">selectOne</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.studentService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意要在resource目录下，创建mapper目录，并创建映射xml文件。namespace要对应dao所在的目录，id要与方法名一致。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.alan.dao.StudentDao"</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--查询单个--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"queryById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"student"</span>&gt;</span><br><span class="line">        select</span><br><span class="line">          id, name, age, birthday, gender, classes</span><br><span class="line">        from student</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>最后我们在postman测试seleceOne方法，返回结果如下。</p><p><img src="result.png" alt="result"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;初识mybatis&lt;/center&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="alanngu.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="alanngu.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring常用注解</title>
    <link href="alanngu.github.io/2020/04/09/Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>alanngu.github.io/2020/04/09/Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2020-04-09T03:47:36.000Z</published>
    <updated>2020-04-09T07:22:44.909Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="Spring部分"><a href="#Spring部分" class="headerlink" title="Spring部分"></a>Spring部分</h3><h4 id="声明bean的注解"><a href="#声明bean的注解" class="headerlink" title="声明bean的注解"></a>声明bean的注解</h4><ul><li><strong>@Component组件</strong> 没有明确的角色</li><li><strong>@Service</strong> 在业务逻辑层使用(service层)</li><li><strong>@Repository</strong> 在数据访问层使用(dao层)</li><li><strong>@Controller</strong> 在控制层使用(Controller层)</li></ul><h4 id="注入bean的注解"><a href="#注入bean的注解" class="headerlink" title="注入bean的注解"></a>注入bean的注解</h4><ul><li><strong>@Autowired</strong> :由<em>spring</em>提供</li><li><strong>@Inject</strong>: 由<em>JSR-330</em>提供</li><li><strong>@Resource</strong> : 由<em>JSR-250</em>提供</li></ul><p>都可以注解在set方法和属性上,推荐注解在属性上,这样更加一目了然,代码更简洁.</p><h4 id="java配置类相关注解"><a href="#java配置类相关注解" class="headerlink" title="java配置类相关注解"></a>java配置类相关注解</h4><ol><li><p><strong>@Configuration</strong> 声明当前类为配置类,相当于xml形式的spring配置(类上)</p></li><li><p><strong>@Bean</strong> 注解在方法上,声明当前方法的返回值为一个bean,替代xml中的方式(方法上)</p></li><li><p><strong>@ComponentScan</strong> 用于对Component进行扫描</p></li><li><p><strong>@WishlyCofiguration</strong> 为<em>@Configuration</em> 与 <em>@ComponentScan</em>的组合注解</p></li></ol><h4 id="AOP相关注解"><a href="#AOP相关注解" class="headerlink" title="AOP相关注解"></a>AOP相关注解</h4><p>Spring支持AspeccJ的注解式切面编程.</p><p><strong>@Aspect</strong> 声明一个切面(类上)</p><p>使用@After @Before @Around定义建言(advice), 可直接将拦截规则(切点)作为参数</p><ul><li>@After 在方法执行之后执行</li><li>@Before 在方法执行之前执行</li><li>@Around 在方法执行之前和之后执行</li></ul><p>@PointCut声明切点</p><p>在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持.(类上)</p><h4 id="Bean的属性支持"><a href="#Bean的属性支持" class="headerlink" title="@Bean的属性支持"></a>@Bean的属性支持</h4><p>@Scope设置Spring容器如何新建Bean实例(方法上,需要有@Bean)</p><p>其设置包括:</p><ul><li>Singleton (单例,一个Spring容器中只有一个bean实例,默认模式)</li><li>Protetype (每次调用新建一个bean)</li><li>request (web项目中,给每个http request新建一个bean)</li><li>Session (web项目中,给每个http session新建一个bean)</li><li>GlobalSession (给每一个Global http session新建一个Bean实例)</li></ul><p>@StepScope 在Spring Batch中还有涉及</p><p>@PostConstruct 由JSR-250提供,在构造函数执行完之后执行,等价于xml配置文件中bean的initMethod.</p><p>@PreDestory 由JSR-250提供,在Bean销毁之前执行,等价于xml配置文件中bean的destroyMethod.</p><h4 id="Value注解"><a href="#Value注解" class="headerlink" title="@Value注解"></a>@Value注解</h4><p>@Value 为属性注入值(属性上)</p><p>支持如下方式的注入</p><p>注入普通字符</p><pre><code>@value(&quot;Alan Walker&quot;)String name;</code></pre><p>注入操作系统属性</p><pre><code>@Value(&quot;#{systemProperties[&apos;os.name]}&quot;)String osName;</code></pre><p>注入表达式结果</p><pre><code>@Value(&quot;#{T(java.lang.Math).random() * 100}&quot;)String randomNumber;</code></pre><p>注入其他bean属性</p><pre><code>@Value(&quot;#{domeClass.name}&quot;)String name;</code></pre><p>注入文件资源</p><pre><code>@Value(&quot;classpath:com/hello/demo.txt&quot;)String Resource file;</code></pre><p>注入配置文件</p><pre><code>@Value(&quot;@{student.name}&quot;)String studentName;</code></pre><p>注入配置的使用方法:</p><ol><li>编写配置文件(test.properties)</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student.name</span> = <span class="string">"张三"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>@PropertySource加载配置文件(类上)</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(<span class="meta-string">"classpath:com/hello/test/test.properties"</span>)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>还需要配置一个PropertySourcePlaceholderConfigurer的bean.</li></ol><h4 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h4><p><strong>@Profile</strong>通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境.(类或方法上)</p><p><strong>@Conditional</strong> Spring4中可以使用词注解定义条件化的bean,通过实现Condition接口,并重写matches方法,从而决定该bean是否被实例化.(方法上)</p><h4 id="异步相关"><a href="#异步相关" class="headerlink" title="异步相关"></a>异步相关</h4><p>@EnableAsync 配置类中,通过从注解开启对异步任务的支持.</p><p>@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务(方法上或类上所有的方法都将异步,需要@EnableAsync开启异步任务)</p><h4 id="定时任务相关"><a href="#定时任务相关" class="headerlink" title="定时任务相关"></a>定时任务相关</h4><p>@EnableScheduling 在配置类上使用,开启计划任务的支持(类上)</p><p>@Scheduled 来申明这是一个任务,包括cron.fixDelay.fixRate等类型(方法上,需开启计划任务的支持)</p><h4 id="Enable-注解说明"><a href="#Enable-注解说明" class="headerlink" title="@Enable*注解说明"></a>@Enable*注解说明</h4><ul><li>@EnableAspectJAutoproxy 开启对AspectJ自动代理的支持</li><li>@EnableAsync 开启异步方法的支持</li><li>@EnableScheduling 开启计划任务的支持</li><li>@EnableWebMvc 开启Web MVC的配置支持</li><li>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</li><li>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</li><li>@EnableTransactionManagement 开启注解式事务的支持</li><li>@EnableCaching 开启注解式的缓存支持</li></ul><h4 id="测试相关注解"><a href="#测试相关注解" class="headerlink" title="测试相关注解"></a>测试相关注解</h4><p>@RunWith运行器,Spring中通常用于对JUnit的支持</p><pre><code>@RunWith(SpringJUnit4ClassRunner.class)</code></pre><p>@ContextConfiguration 用来加载配置ApplicationContext,其中classes属性用来加载配置类</p><pre><code>@ContextConfiguration(classes={TestConfig.class})</code></pre><h3 id="SpringMVC-部分"><a href="#SpringMVC-部分" class="headerlink" title="SpringMVC 部分"></a>SpringMVC 部分</h3><p><strong>@EnableWebMvc</strong></p><p>在配置类中开启Web MVC的配置支持</p><p><strong>@Controller</strong></p><p>声明该类为SpringMVC中的Controller</p><p><strong>@ResponseBody</strong></p><p>支持将返回值放到Response内,而不是一个页面,通常用户返回json数据(返回值旁或方法上)</p><p><strong>@RequestBody</strong></p><p>允许request的参数在request体中,而不是在直接连接在地址后面.(放在参数前)</p><p><strong>@PathVariable</strong></p><p>用于接收路径参数,如@RequestMapping(“hello/{name}”)申明的路径,将注解放在参数前,即可获取该值,通常作为Restful的接口实现方法.</p><p><strong>@RestController</strong></p><p>该注解为一个组合注解,相当与@Controller和ResponseBody的组合,注解在类上,意味着该Controller的所有方法都默认加上了@ResponseBody.</p><p><strong>@ControllerAdvice</strong></p><p>通过该注解,我们可以对于控制器的全局配置放置在同一个位置,注解了@Controller的类的方法可以使用@ExceptionHandler @InitBinder @ModelAttribute注解到方法上,这对所有注解了@RequestMapping的控制器内的方法有效.</p><p><strong>@ExceptionHandler</strong></p><p>用于全局处理控制器里的异常.</p><p><strong>@ModelAttribute</strong></p><p>注解到方法上,将数据添加到模型对象中，用于视图页面展示时使用@ModelAttribute等价于 model.addAttribute(“attributeName”, abc);</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;java开发中常用注解&lt;/center&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="alanngu.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="alanngu.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker(1)</title>
    <link href="alanngu.github.io/2020/02/16/Docker/"/>
    <id>alanngu.github.io/2020/02/16/Docker/</id>
    <published>2020-02-16T12:36:32.000Z</published>
    <updated>2020-04-09T03:19:01.039Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><h4 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h4><p>Docker最初是dotCloud公司创始人Solomon Hykes在法国期间发起的一个公司内部项目，在2013年3月以Apache 2.0授权协议开源, 主要项目代码在GitHub上进行维护.</p><p>Docker使用Google公司推出的Go语言进行开发实现.</p><p>Docker是Linux容器的一种封装,提供简单易用的容器使用接口.它是最流行的linux容器解决方案.</p><p>Docker的接口相当简单,用户可以方便的创建和销毁容器.</p><p>Docker将应用程序与程序的依赖,打包在一个文件里面.运行这个文件就会生成一个虚拟容器.</p><p>程序运行在虚拟容器里,如同在真实物理机上运行一样.不需要在担心开发环境和测试环境不一致的问题.</p><h4 id="应用环境"><a href="#应用环境" class="headerlink" title="应用环境"></a>应用环境</h4><ul><li>web应用的自动化打包和发布</li><li>自动化测试和持续集成、发布</li><li>在服务型环境中部署和调整数据库或其他应用</li></ul><h4 id="Docker的三大概念及优势"><a href="#Docker的三大概念及优势" class="headerlink" title="Docker的三大概念及优势"></a>Docker的三大概念及优势</h4><ul><li><strong>镜像</strong> image</li><li><strong>容器</strong> container</li><li><strong>仓库</strong> repository</li></ul><blockquote><p>Docker容纳容器的优势</p><blockquote><p>1 更为高效的利用系统资源<br>2 更快速的启动时间<br>3 一致的运行环境<br>4 持续交付和部署<br>5 更轻松的迁移</p></blockquote></blockquote><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>系统环境:docker最低支持centos7且在64位平台上,内核版本在3.10以上<br>版本: 社区版, 企业版(包含了一些收费服务)<br><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">官方安装教程</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;doker基本知识&lt;/center&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="alanngu.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="alanngu.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>git项目部署</title>
    <link href="alanngu.github.io/2020/01/15/deployProject/"/>
    <id>alanngu.github.io/2020/01/15/deployProject/</id>
    <published>2020-01-15T08:47:39.000Z</published>
    <updated>2020-01-17T07:16:21.338Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><ul><li><p>点击 + 按钮选择新建仓库<br><img src="createRepository.png" alt=""><br><img src="createRepository2.png" alt=""><br><img src="createRepository3.png" alt=""></p></li><li><p>初始化本地仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure></li><li><p>关联本地仓库与远程仓库</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//gitee.<span class="keyword">com</span>/xxx/testRepository.git</span><br></pre></td></tr></table></figure></li><li><p>在push之前先pull</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin <span class="keyword">master</span> <span class="title">--allow-unrelated-histories</span></span><br></pre></td></tr></table></figure></li><li><p>将本地仓库push到远程仓库</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br><span class="line">git commit -m <span class="string">'first commit'</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;部署本地仓库到码云远程仓库&lt;/center&gt;
    
    </summary>
    
    
      <category term="git" scheme="alanngu.github.io/categories/git/"/>
    
      <category term="deploy" scheme="alanngu.github.io/categories/git/deploy/"/>
    
    
      <category term="git" scheme="alanngu.github.io/tags/git/"/>
    
      <category term="deploy" scheme="alanngu.github.io/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="alanngu.github.io/2019/11/09/maven/"/>
    <id>alanngu.github.io/2019/11/09/maven/</id>
    <published>2019-11-09T13:25:12.000Z</published>
    <updated>2020-04-09T08:41:47.339Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="Maven是什么？"><a href="#Maven是什么？" class="headerlink" title="Maven是什么？"></a>Maven是什么？</h3><p>Maven是Apache下的一个纯java开发的一个开源项目，他是一个能够抽象构建过程，并且提供依赖管理，中央仓库，自动下载构建等功能的项目构建工具。</p><h3 id="为什么选择Maven工具构建项目？"><a href="#为什么选择Maven工具构建项目？" class="headerlink" title="为什么选择Maven工具构建项目？"></a>为什么选择Maven工具构建项目？</h3><p>可以解决项目中所有的jar包都需要统一导入和维护，后期维护难度极高的问题</p><p>假如我们在开发两个java项目，暂时称为A&amp;B，这两个项目中对于一些特殊功能会有一些特殊功能会有相互依赖的情况下，该如何做两者之间较好的关联呢？<br>A: 将公共的代码打包成jar引入项目中使用<br>缺点：后期进行代码更新需要对所有引入的jar包进行更新,繁琐.</p><h3 id="Maven如何进行jar的管理？"><a href="#Maven如何进行jar的管理？" class="headerlink" title="Maven如何进行jar的管理？"></a>Maven如何进行jar的管理？</h3><p>在maven这款工具里面，有一个概念称为坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如上面的坐标信息<br>Group代表 该jar所属的实际项目，由于通常一个项目可能会划分为多个模块，因此artifactId则是对于该项目的某个模块进行了一个明确的标识。<br>Version元素更多的是定义了该构件的真实版本。通常我们会称呼这一段dependency为依赖</p><p>对于依赖的读取还有一个Scope的配置</p><blockquote><p>scope</p><blockquote><p>a. compile 默认，意味着该依赖纪要参与编译又要参与后期测试<br>b. test 标识该依赖仅仅参加测试有关的工作<br>c. provided 可以参与编译、测试、运行等周期，但是打包时会进行exclude的相应操作。其他方面和compile差异不大<br>d. runntime 在编译环节不会参与进来，个人感觉和compile差异不大<br>e. system 通常是指不从仓库中读取依赖，而是通过本地路径来读取依赖，通常与systemPath标签结合使用。</p></blockquote></blockquote><p>基于parent的依赖管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于properties的依赖管理，在properties里面我们可以进行整个项目的统一字符集编码管理或者对于一些依赖jar包统一版本号的管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.6<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Maven的仓库"><a href="#Maven的仓库" class="headerlink" title="Maven的仓库"></a>Maven的仓库</h3><p>当我们导入相应的依赖时，maven调用内部从网络上下载依赖的功能，我们成这个拥有依赖的平台为仓库。</p><blockquote><p>仓库</p><blockquote><p>a. 本地仓库 从网上下载下来的jar会存储在本地仓库<br>b. 第三方仓库 公司或内部搭建的公共仓库站点<br>c. 中央仓库 maven官方自己维护的一个远程公用仓库</p></blockquote></blockquote><p>可以通过尝试将mirror配置修改成访问阿里云镜像的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/goups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>nexus</strong>是一款较为强大的maven仓库管理工具，它极大的简化 了自己内部仓库的维护和外部仓库的访问。Nexus是一套开箱即用的系统，不需要配置数据库，它使用文件管理系统夹Lucene来组成数据。Nexus使用ExtJS来开发界面，利用Restlet来提供完整的REST APIs，通过m2eclipse与eclipse集成使用。Nexus支持WebDAV与LDAP安全身份认证。<br>除了Nexus以外，还有Jfrog Artifactory仓库管理工具</p><h3 id="Maven工程的项目结构是如何的呢？"><a href="#Maven工程的项目结构是如何的呢？" class="headerlink" title="Maven工程的项目结构是如何的呢？"></a>Maven工程的项目结构是如何的呢？</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">    <span class="selector-tag">a</span>. main</span><br><span class="line">        <span class="selector-tag">i</span>. java</span><br><span class="line">        ii. resources</span><br><span class="line">    <span class="selector-tag">b</span>. test</span><br><span class="line">        <span class="selector-tag">i</span>. java</span><br><span class="line">        ii. resources</span><br></pre></td></tr></table></figure><p>通常的业务代码放在java下，测试在test目录下，resources放置yml，xml，properties等配置文件项目结构可能会因为idea的版本不同而有差异</p><h3 id="Maven的常用命令和生命周期？"><a href="#Maven的常用命令和生命周期？" class="headerlink" title="Maven的常用命令和生命周期？"></a>Maven的常用命令和生命周期？</h3><p>Maven本身有三套独立的生命周期和各自的职能，如下<br>|clean | default | site|<br>|—|—|—|<br>|清理 | 构建 | 建立站点|</p><p>Clean<br>pre-clean –&gt; clean –&gt; post-clean</p><p>常用命令</p><ol><li>mvn archetype:create –&gt; 创建Maven项目</li><li>mvn compile –&gt; 编译源代码</li><li>mvn test-compile –&gt; 编译测试代码</li><li>mvn test –&gt; 运行应用程序中的单元测试</li><li>mvn site –&gt; 生成项目相关信息的网点</li><li>mvn clean –&gt; 清除目标目录中的生成结果</li><li>mvn package –&gt; 依据项目生成jar文件</li><li>mvn install –&gt; 在本地Repository中安装jar</li></ol><p><strong>通过profile文件来指定特定的编译环境</strong></p><p>在实际的项目开发过程中，我们通常会需要结合实际的应用场景切换不同的运行环境<br>dev、test、pre、pro，在不同的环境中读取不同的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 本地环境配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 测试环境配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在pom文件里面配置以上相应的profile内容之后,在进入工程打包的时候默认通过mvn<br>clean package-Pdev(对应profile文件的id)的方式来判断不同环境下的读取方式</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Maven基础&lt;/center&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="alanngu.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="alanngu.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Lombok Document</title>
    <link href="alanngu.github.io/2019/06/16/LombokDocument/"/>
    <id>alanngu.github.io/2019/06/16/LombokDocument/</id>
    <published>2019-06-16T02:08:17.000Z</published>
    <updated>2020-01-17T07:16:21.338Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ul><li>lombok可以减少程序中冗长简单的代码，自动生成Getter、Setter、构造函数和hashCode等函数。</li></ul><h3 id="Use-Lombok-In-Intellij-IDEA"><a href="#Use-Lombok-In-Intellij-IDEA" class="headerlink" title="Use Lombok In Intellij IDEA"></a>Use Lombok In Intellij IDEA</h3><h4 id="Install-lombok-Plugin"><a href="#Install-lombok-Plugin" class="headerlink" title="Install lombok Plugin"></a>Install lombok Plugin</h4><p>通过Intellij的插件中心安装 settings &gt;&gt; Plugins</p><h4 id="Add-Dependency"><a href="#Add-Dependency" class="headerlink" title="Add Dependency"></a>Add Dependency</h4><p>在使用Lombok注解时需要在pom中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Lombok-features"><a href="#Lombok-features" class="headerlink" title="Lombok features"></a>Lombok features</h3><h4 id="val"><a href="#val" class="headerlink" title="val"></a>val</h4><p>你可以使用<code>val</code>来声明<strong>局部变量</strong>,不用声明变量的具体类型,编译器会根据初始化表达式中推断出当前局部变量的类型,同时此变量声明为<code>final</code>.初始化表达式是必需的,此功能仅适用于<strong>局部变量</strong>和<strong>foreach循环</strong>，不适用于<u>字段</u>。</p><h4 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h4><p>可以将<code>@NonNull</code>用在方法或者构造函数的参数上,<u>Lombok</u>将自动生成非空判断. 如果你使用<u>Lombok</u>生成了整个方法或者构造函数(比如<code>@Data</code>),<u>Lombok</u>会默认使用<code>@NonNull</code>修饰字段形成非空判断. 但是,如果你显式使用@NonNull修饰了自己的方法或构造函数上的参数,那么它将只在你修饰的参数上生成非空判断.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">if</span> (person == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"person is marked @NonNull but is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h4><p>自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成try-finally这样的代码流</p><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter @Setter"></a>@Getter @Setter</h4><p>用在属性上，不需要自己手写Setter和getter方法了，还可以指定访问范围<br>将@Getter和@Setter注解在类上将会自动生成所有字段的getter和setter方法,如果不需要生成所有,可以在需要生成getter和setter的字段前修饰.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h4><p>用在类上，可以自动复写<code>toString</code>方法，它将默认打印你的类名和所有字段并用逗号分隔.还可以添加其他的参数，例如@ToString( exclude = “id” )排除id属性，或者使用<code>ToString.Inclued</code>和 <code>ToString.Exclude</code>来控制打印或不打印指定字段.<br>@ToString(callSuper=true,includeFieldNames=true)调用父类的toString方法，包含所有属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="meta">@ToString</span>.Exclude <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ToString</span>(callSuper=<span class="keyword">true</span>, includeFieldNames=<span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h4><p>用在类上，自动生成<code>equals</code>方法和<code>hashCode</code>方法</p><h4 id="NoArasConstructor"><a href="#NoArasConstructor" class="headerlink" title="@NoArasConstructor"></a>@NoArasConstructor</h4><p>自动生成<code>无参构造函数</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AllAragsConstructor"><a href="#AllAragsConstructor" class="headerlink" title="@AllAragsConstructor"></a>@AllAragsConstructor</h4><p>生成全参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String age, String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h4><p><code>@RequiredArgsConstructor</code>生成一个包含标识了<strong>NonNull</strong>的变量的构造方法</p><h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><p>注解在类上，相当于同时使用了@ToString，@EqualsAndHashCode，@Getter，@Setter和@RequiredArgsConstructor这些注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstname;</span><br><span class="line">    <span class="keyword">private</span> String lastname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String firstname;</span><br><span class="line">    <span class="keyword">private</span> String lastname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstname</span><span class="params">(String firstname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstname = firstname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastname</span><span class="params">(String lastname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastname = lastname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = <span class="number">7</span>;</span><br><span class="line">        hash = <span class="number">17</span> * hash + Objects.hashCode(<span class="keyword">this</span>.firstname);</span><br><span class="line">        hash = <span class="number">17</span> * hash + Objects.hashCode(<span class="keyword">this</span>.lastname);</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Person other = (Person) obj;</span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(<span class="keyword">this</span>.firstname, other.firstname)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(<span class="keyword">this</span>.lastname, other.lastname)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(<span class="keyword">final</span> Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> other <span class="keyword">instanceof</span> Person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"firstname="</span> + firstname + <span class="string">", lastname="</span> + lastname + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><p>用在类上，是@Data的不可变形式，相当于属性为final声明，只提供getter方法，而不是提供setter方法</p><h4 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h4><p>可以让类的实例化通过一条语句链式生成,比如$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.builder().name(<span class="string">"Adam Savage"</span>).city(<span class="string">"San Francisco"</span>)</span><br></pre></td></tr></table></figure><h3 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a>Reference Documents</h3><ul><li><a href="https://projectlombok.org/features/all" target="_blank" rel="noopener">https://projectlombok.org/features/all</a></li><li><a href="https://stevenmwesigwa.com" target="_blank" rel="noopener">https://stevenmwesigwa.com</a></li></ul><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p><a href="https://projectlombok.org/download" target="_blank" rel="noopener" class="LinkCard">Lombok官方下载</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Lombok Basic Usage&lt;/center&gt;
    
    </summary>
    
    
      <category term="Lombok" scheme="alanngu.github.io/categories/Lombok/"/>
    
    
      <category term="Lombok" scheme="alanngu.github.io/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Functional Interface</title>
    <link href="alanngu.github.io/2019/05/26/javaFunctionInterface/"/>
    <id>alanngu.github.io/2019/05/26/javaFunctionInterface/</id>
    <published>2019-05-26T13:39:38.000Z</published>
    <updated>2020-01-17T07:16:21.339Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="什么是函数式接口"><a href="#什么是函数式接口" class="headerlink" title="什么是函数式接口"></a>什么是函数式接口</h3><ul><li>只包含一个抽象方法的接口，称为函数式接口</li><li>可以通过Lambda表达式来创建该接口的对象</li><li>可以在任意函数式接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口</li></ul><hr><h3 id="自定义函数式接口"><a href="#自定义函数式接口" class="headerlink" title="自定义函数式接口"></a>自定义函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">myFunc</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="作为参数传递Lambda表达式"><a href="#作为参数传递Lambda表达式" class="headerlink" title="作为参数传递Lambda表达式"></a>作为参数传递Lambda表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperString</span><span class="params">(MyFunc&lt;String&gt; mf, String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mf.getValue(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为参数传递lambda表达式</span></span><br><span class="line">String newStr = toUpperString((str) -&gt; str.toUpperCase(), <span class="string">"abdcegf"</span>);</span><br><span class="line">System.out.println(newStr);</span><br></pre></td></tr></table></figure><blockquote><p>为了将Lambda表达式作为参数传递，接收 Lambda 表达式的参数类型应该是与该 Lambda 表达式兼容的函数式接口的类型</p></blockquote><hr><h3 id="四大核心函数式接口"><a href="#四大核心函数式接口" class="headerlink" title="四大核心函数式接口"></a>四大核心函数式接口</h3><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer&lt;T&gt;<br>消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作,<br>包含方法：void accept(T t)</td></tr><tr><td>Supplier&lt;T&gt;<br>供给型接口</td><td></td><td></td><td></td></tr></tbody></table><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://t.cn/A6vi0DP9" target="_blank" rel="noopener">http://t.cn/A6vi0DP9</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt; Java 函数式接口&lt;/center&gt;
    
    </summary>
    
    
      <category term="Java" scheme="alanngu.github.io/categories/Java/"/>
    
      <category term="Functional Interface" scheme="alanngu.github.io/categories/Java/Functional-Interface/"/>
    
    
      <category term="Java" scheme="alanngu.github.io/tags/Java/"/>
    
      <category term="Functional Interface" scheme="alanngu.github.io/tags/Functional-Interface/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Lambda</title>
    <link href="alanngu.github.io/2019/05/16/Java-8-Lambda/"/>
    <id>alanngu.github.io/2019/05/16/Java-8-Lambda/</id>
    <published>2019-05-16T12:36:32.000Z</published>
    <updated>2020-01-17T07:16:21.337Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Lambda表达式在代码中属于一个匿名函数，即没有名称且不受标识符限制的函数。可以理解为是一段可以传递的代码。它是java 8 发布的重要特性，通过使用Lambda表达式可以使代码更加简洁紧凑。</p><h3 id="Basic-syntax-format"><a href="#Basic-syntax-format" class="headerlink" title="Basic syntax format"></a>Basic syntax format</h3><p>Lambda表达式在java语言中引入了新的语法元素和操作符。这个操作符为 <code>-&gt;</code> ，该操作符被称为Lambda操作符或者箭头操作符，它将Lambda分为两个部分：</p><ul><li><strong>左侧</strong> ：指定了Lambda表达式所需要的<code>所有参数</code></li><li><strong>右侧</strong> ：指定了 <code>Lambda体</code>， 即 Lambda 表达式要执行的功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法格式一 : 无参, 无返回值, Lambda表达式只需要一条语句</span></span><br><span class="line">Runnable r1 = () -&gt; System.out.println(<span class="string">"Hello Lambda!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式二 : 一个参数</span></span><br><span class="line">Consumer&lt;String&gt; fun = (args) -&gt; System.out.println(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式三 : lambda只需要一个参数时, 参数的小括号可以省略不写</span></span><br><span class="line">Consumer&lt;String&gt; fun = (args) -&gt; System.out.println(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式四 : lambda需要两个参数且有返回值</span></span><br><span class="line">BinaryOperator&lt;Long&gt; bo = (x, y) - &#123;</span><br><span class="line">    System.out.println(<span class="string">"实现函数接口方法!"</span>);</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式五 : 当Lambda体只有一条语句时, return与大括号可以省略.</span></span><br><span class="line">BinaryOperator&lt;Long&gt; bo = (x, y) -&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法格式六 : 显式声明lambda需要参数的类型(数据类型可以省略,编译器可自行进行类型推断)</span></span><br><span class="line">BinaryOperator&lt;Long&gt; bo = (Long x, Long y) - &#123;</span><br><span class="line">    System.out.println(<span class="string">"实现函数接口方法!"</span>);</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>类型推断: Lambda 表达式中不需要指定参数类型,程序依然可以编译,这是因为 javac 根据程序的上下文,在后台推断除了参数的类型.Lambda 表达式的类型依赖于上下文环境,是由编译器推断出来的.这就是所谓的<code>类型推断</code></p></blockquote><h3 id="Features-of-Lambda-Expressions"><a href="#Features-of-Lambda-Expressions" class="headerlink" title="Features of Lambda Expressions"></a>Features of Lambda Expressions</h3><ul><li>参数的类型可以显式的声明也可以省略，编译器可以根据上下文自行推断出参数的类型。</li><li>如果有多个参数，须要使用括号括起来，并使用逗号进行分隔。空括号代表参数为空。</li><li>如果lambda表达式只有一行参数,可以不适用括号. 比如 <code>x -&gt; return x *</code></li><li>如果Lambda表达式的主体只有单个语句，且返回值类型与表达式的返回类型相同，则可以省略大括号。如果含有多条语句，则必须使用大括号。</li></ul><h3 id="Lambda-example"><a href="#Lambda-example" class="headerlink" title="Lambda example"></a>Lambda example</h3><ul><li>从匿名内部类到Lambda的转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名内部类</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Alan."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda表达式</span></span><br><span class="line">Runnable runnable = () -&gt; System.out.println(<span class="string">"Hello Alan."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原本使用匿名内部类作为参数传递</span></span><br><span class="line">TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.length(), o2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda表达式作为参数传递</span></span><br><span class="line">TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;((o1,o2) -&gt; Integer.compare(o1.length(),o2.length()));</span><br></pre></td></tr></table></figure><h3 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a>Reference Documents</h3><ul><li><a href="http://t.cn/A6viO4TN" target="_blank" rel="noopener">http://t.cn/A6viO4TN</a></li><li><a href="http://t.cn/A6vi0DP9" target="_blank" rel="noopener">http://t.cn/A6vi0DP9</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;java 8 的重要特性-Lambda&lt;/center&gt;
    
    </summary>
    
    
      <category term="Java" scheme="alanngu.github.io/categories/Java/"/>
    
      <category term="Lambda" scheme="alanngu.github.io/categories/Java/Lambda/"/>
    
    
      <category term="Java" scheme="alanngu.github.io/tags/Java/"/>
    
      <category term="Lambda" scheme="alanngu.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>MySQL查找删除重复数据</title>
    <link href="alanngu.github.io/2019/04/09/searchAndDeleteRepeat/"/>
    <id>alanngu.github.io/2019/04/09/searchAndDeleteRepeat/</id>
    <published>2019-04-09T13:50:12.000Z</published>
    <updated>2020-05-19T09:28:55.447Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="如何查找重复行"><a href="#如何查找重复行" class="headerlink" title="如何查找重复行"></a>如何查找重复行</h3><p>第一步的定义什么样的行才是重复行。多数情况下很简单：他们某一列具有相同的值。本文采用这一定义，如果你对重复的定义比这复杂，你需要对sql做些修改。<br>如下为本文用到的数据样本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'自增主键'</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">age <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'年龄'</span>,</span><br><span class="line"><span class="keyword">day</span> <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'日期'</span>,</span><br><span class="line">primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">engine</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">    student(<span class="keyword">name</span>,age,<span class="keyword">day</span>)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">    (<span class="string">'alan'</span>,<span class="number">18</span>,<span class="string">'2012-10-09'</span>),</span><br><span class="line">    (<span class="string">'peter'</span>,<span class="number">24</span>,<span class="string">'2012-10-09'</span>),</span><br><span class="line">    (<span class="string">'joe'</span>,<span class="number">27</span>,<span class="string">'2012-10-10'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>, age, <span class="keyword">day</span> <span class="keyword">from</span> student；</span><br></pre></td></tr></table></figure><p>执行上方sql查询结果如下表所示</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>day</th></tr></thead><tbody><tr><td>1</td><td>alan</td><td>18</td><td>2018-10-09</td></tr><tr><td>2</td><td>peter</td><td>24</td><td>2018-10-09</td></tr><tr><td>3</td><td>joe</td><td>27</td><td>2018-10-10</td></tr></tbody></table><p>前⾯两⾏在day字段具有相同的值，因此如何我将他们当做重复⾏，这⾥有⼀查询语句可以查找。查询语句使⽤GROUP BY⼦句 把具有相同字段值的⾏归为⼀组，然后计算组的⼤⼩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>,<span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">day</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>day</th><th>count</th></tr></thead><tbody><tr><td>2018-10-09</td><td>2</td></tr><tr><td>2018-10-10</td><td>1</td></tr></tbody></table><p>重复⾏的组⼤⼩⼤于1。如何希望只显⽰重复⾏，必须使⽤HAVING⼦句，⽐如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>,<span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">day</span> <span class="keyword">having</span> <span class="keyword">count</span> &gt;<span class="number">1</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>day</th><th>count</th></tr></thead><tbody><tr><td>2018-10-09</td><td>2</td></tr></tbody></table><p>根据具有相同值的字段分组，然后得知显示大小大于1的组。</p><blockquote><p>为什么不使用where子句？<br>因为where子句过滤的是分组之前的行，having子句过滤的是分组之后的行。</p></blockquote><h3 id="如何删除重复行"><a href="#如何删除重复行" class="headerlink" title="如何删除重复行"></a>如何删除重复行</h3><p>常见的任务是，重复行只保留一行，其它的删除，然后可以创建适当的索引防止以后再有重复的行写入数据库。</p><p>同样，首先应当弄清楚重复行的定义。你要保留的是哪一行呢？第一行，或者是某个字段具有最大值的行？本文中，假设保留的是第一行，id字段具有最小值的行。</p><p>也许最简单的方法是通过临时表。尤其对于MySQL，有些限制是不能在查询语句中select的同时update一个表。简单起见，这里使用临时表的方法。</p><p>我们的任务是删除所有重复行，除了分组中id字段具有最小值的行。因此，需要找出大小大于1分组，以及希望保留的行。可以使用MIN()函数。下面的语句是创建临时表，以及查找需要用delete删除的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">table</span> to_delete(</span><br><span class="line"><span class="keyword">day</span> <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">min_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> to_delete(<span class="keyword">day</span>,min_id)</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">day</span>,<span class="keyword">MIN</span>(<span class="keyword">id</span>) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">day</span> <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> to_delete;</span><br></pre></td></tr></table></figure><table><thead><tr><th>day</th><th>min_id</th></tr></thead><tbody><tr><td>2018-10-09</td><td>1</td></tr></tbody></table><p>有了这些数据，就可以删除重复数据了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> studentwhere <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> to_delete</span><br><span class="line">    <span class="keyword">where</span> to_delete.day = student.day <span class="keyword">and</span> to_delete.min_id &lt;&gt; student.id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;查找数据库中重复的数据&lt;/center&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="alanngu.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="alanngu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>查找关闭指定端口号进程</title>
    <link href="alanngu.github.io/2019/04/09/closePort/"/>
    <id>alanngu.github.io/2019/04/09/closePort/</id>
    <published>2019-04-09T12:50:21.000Z</published>
    <updated>2020-04-09T08:09:18.141Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><p>如何关闭运行在某端口的进程,接下来以 :8080端口示例.</p><h3 id="查找占用端口号的进程"><a href="#查找占用端口号的进程" class="headerlink" title="查找占用端口号的进程"></a>查找占用端口号的进程</h3><pre><code>netstat -o -a -n | findstr :8080</code></pre><h3 id="根据PID关闭进程"><a href="#根据PID关闭进程" class="headerlink" title="根据PID关闭进程"></a>根据PID关闭进程</h3><pre><code>taskkill /F /PID 6528</code></pre><p>如下图所示</p><p><img src="closePort1.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;查找并关闭指定端口号正在运行的程序&lt;/center&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="alanngu.github.io/categories/Tips/"/>
    
    
      <category term="Tips" scheme="alanngu.github.io/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>MySQL四种隔离级别的理解</title>
    <link href="alanngu.github.io/2018/11/16/MySQL%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>alanngu.github.io/2018/11/16/MySQL%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2018-11-16T12:32:36.000Z</published>
    <updated>2020-05-22T08:52:21.879Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><blockquote><p>事务是应用程序一系列严密的操作，所有的操作都必须成功完成，否则在某个操作中所作的所有更改将全部撤销。这也就是事务的原子性，一个事务中一系列的操作的结果只有两种，全部成功或全部失败。<br>事务的结束有两种，当事务中的所有步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤销到没有执行事务时的状态。</p></blockquote><h4 id="事务的ACID"><a href="#事务的ACID" class="headerlink" title="事务的ACID"></a>事务的ACID</h4><p>事务具有四种特性： 原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持续性（Durability）。这四种特性简称为ACID特性。</p><ul><li>原子性。事务时数据库的逻辑工作单位，事务中包含的各种操作要么全部完成，要么全部失败。</li><li>一致性。事务执行的结果必须是使数据库从一个一致性状态百年到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统运行中发生故障，有些事务尚未完成就被中断，这些未完成的事务对数据库所作的修改有一部分已写入物理数据库，这是数据库就处于一种不正确的状态，或者说是不一致的状态。</li><li>隔离性。每个事务的执行不会收到其他事务的干扰。即一个事务内部的操作及使用的数据对其它并发事务时隔离的，并发执行的各个事务之间不能相互干扰。</li><li>持续性。也称之为永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。</li></ul><h4 id="事务的四种隔离级别"><a href="#事务的四种隔离级别" class="headerlink" title="事务的四种隔离级别"></a>事务的四种隔离级别</h4><table><thead><tr><th align="center">序号</th><th align="center">隔离级别</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Read Uncommitted</td></tr><tr><td align="center">2</td><td align="center">Read Committed</td></tr><tr><td align="center">3</td><td align="center">Repeatable Read</td></tr><tr><td align="center">4</td><td align="center">Serializable</td></tr></tbody></table><p>SQL标准定义了四类隔离级别，包括了一些具体规则，用来限定事务内外的那些改变时可见的，哪些是不可见的。低级别的隔离级别一般支持更高的并发处理，拥有更低的系统开销。</p><ol><li>Read Uncommitted（读未提交）<br>所有事务都可以看到其它未提交事务的执行结果。因性能优势并不明显，很少用于实际应用。读取未提交的数据，称之为脏读（Dirty Read）。</li></ol><ol start="2"><li>Read Committed（读已提交）<br>大多数数据库系统的默认隔离级别。满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别也支持不可重复读（Nonrepeatable Read），因为统一事务的其它实例在该实例处理期间可能会有新的commit，所以同一select可能返回不同的结果。</li></ol><ol start="3"><li>Repeatable Read（可重读）<br>MySQL的默认事务隔离级别，可以确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这回导致幻读（Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再次读取该范围的数据行时，会发现有新的行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Controller）机制解决了该问题。</li></ol><ol start="4"><li>Serializable（可串行化）<br>最高的隔离级别，通过强制事务排序，使之不可相互冲突，以解决幻读问题。简而言之，它是在每个读的数据行上加上共享锁。在此级别，可能导致大量的超时现象和锁竞争。</li></ol><p>这四种隔离级别采取不同的锁类型来实现，若读取同一个数据，容易出现问题。举个栗子：</p><blockquote><p>脏读（Dirty Read）：某个事物已更新了一条数据，另一个事务在此时读取了同一条数据，由于某些原因，前一个事务进行了回滚操作，此时后一个事务所读的数据就是错误的。</p><p>不可重复读（Non-repeatable Read）：在一个事务的两次查询之中数据不一致，可能是两次查询过程中插入了一个事务更新了第一次查询的数据。</p><p>幻读（Phant Read）：在一个事务的两次查询中数据行数不一致，例如有一个事务查询了范围内的几列数据，另一个事务在这个范围内插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</p></blockquote><p>在MySQL中，实现了这四种隔离级别，分别可能产生的问题如下表所示：</p><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">Read Uncommitted</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">Read Committed</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">Repeatable Read</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">Serializable</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><hr><h3 id="测试MySQL的隔离级别"><a href="#测试MySQL的隔离级别" class="headerlink" title="测试MySQL的隔离级别"></a>测试MySQL的隔离级别</h3><p>首先我们先创建test表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'自增主键'</span>,</span><br><span class="line">    <span class="keyword">num</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0'</span> <span class="keyword">comment</span> <span class="string">'数字'</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br></pre></td></tr></table></figure><p>两个命令行客户端分别为A，B；不断改变A的隔离级别，在B端修改数据。</p><h4 id="将A的隔离级别设置为read-uncommitted-未提交读"><a href="#将A的隔离级别设置为read-uncommitted-未提交读" class="headerlink" title="将A的隔离级别设置为read uncommitted(未提交读)"></a>将A的隔离级别设置为read uncommitted(未提交读)</h4><p><img src="read_uncommitted1.png" alt="read_uncommitted1"></p><p>A：启动事务，此时数据为初始状态</p><p><img src="read_uncommitted2.png" alt="read_uncommitted2"></p><p>B: 启动事务，更新数据，但不提交</p><p><img src="read_uncommitted3.png" alt="read_uncommitted3"></p><p>A: 再次读取数据，发现数据已经被修改了，这就是所谓的脏读。</p><p><img src="read_uncommitted4.png" alt="read_uncommitted4"></p><p>B: 回滚事务</p><p><img src="read_uncommitted5.png" alt="read_uncommitted5"></p><p>A: 再次读数据，发现数据变回初始状态</p><p><img src="read_uncommitted6.png" alt="read_uncommitted6"></p><h4 id="将客户端A的事务隔离级别设置为read-committed（读已提交）"><a href="#将客户端A的事务隔离级别设置为read-committed（读已提交）" class="headerlink" title="将客户端A的事务隔离级别设置为read committed（读已提交）"></a>将客户端A的事务隔离级别设置为read committed（读已提交）</h4><p><img src="read_uncommitted1.png" alt="read_committed1"></p><p>A: 启动事务，此时数据为初始状态</p><p><img src="read_uncommitted2.png" alt="read_committed2"></p><p>B: 启动事务，更新数据，但不提交</p><p><img src="read_uncommitted3.png" alt="read_committed3"></p><p>A: 再次读取数据，发现数据未被修改</p><p><img src="read_uncommitted4.png" alt="read_committed4"></p><p>B: 提交事务</p><p><img src="read_uncommitted5.png" alt="read_committed5"></p><p>A: 再次读取数据，发现数据已发生变化，说明B提交的修改被事务A读到了，这就是不可重复读。</p><p><img src="read_uncommitted6.png" alt="read_committed6"></p><p>经过上面的实验可以得出结论，读已提交隔离级别可以解决脏读的问题，但是出现了不可重复读的问题，即事务A再两次查询的数据不一致，因为再两次查询之间事务B更新了一条数据。读已提交只允许读取已提交的记录，但不要求可重复读。</p><h4 id="将A的隔离级别设置未repeatable-read（可重复读）"><a href="#将A的隔离级别设置未repeatable-read（可重复读）" class="headerlink" title="将A的隔离级别设置未repeatable read（可重复读）"></a>将A的隔离级别设置未repeatable read（可重复读）</h4><p><img src="repeatable_read1.png" alt="repeatable_read1.png"></p><p>A: 启动事务，此时数据为初始状态</p><p><img src="repeatable_read2.png" alt="repeatable_read2.png"></p><p>B：启动事务，更新数据，但不提交</p><p><img src="repeatable_read3.png" alt="repeatable_read3.png"></p><p>A: 再次读取数据，发现数据没有被修改</p><p><img src="repeatable_read4.png" alt="repeatable_read4.png"></p><p>B: 提交事务</p><p><img src="repeatable_read5.png" alt="repeatable_read5.png"></p><p>A: 再次读取数据，发现数据仍然没有被更改，这说明可以重复读了</p><p><img src="repeatable_read6.png" alt="repeatable_read6.png"></p><p>B: 插入一条新的数据，并提交</p><p><img src="repeatable_read7.png" alt="repeatable_read7.png"></p><p>A: 再次读取数据，发现数据依然没有发生变化，虽然可以重复读了，但是读取的却不是最新的数据，这就是所谓的幻读。</p><p><img src="repeatable_read8.png" alt="repeatable_read8.png"></p><p>A: 提交本次事务，再次读取数据，发现读取正常了</p><p><img src="repeatable_read9.png" alt="repeatable_read9.png"></p><p>由以上的实验可以得出结论，可重复读隔离级别只允许读取已提交的记录，而且再一个事务两次读取一个记录期间，其它事务B更改该记录。但该事务不要求与其他事务可串行化。例如，当一个事务可以找到由一个已提交事务更新的记录，可能会产生幻读的问题。</p><h4 id="将A的隔离级别设置为可串行化（Serializable）"><a href="#将A的隔离级别设置为可串行化（Serializable）" class="headerlink" title="将A的隔离级别设置为可串行化（Serializable）"></a>将A的隔离级别设置为可串行化（Serializable）</h4><p><img src="serializable1.png" alt="serializable1.png"></p><p>A: 启动事务，此时数据为初始状态</p><p><img src="serializable2.png" alt="serializable2.png"></p><p>B: 开启另一个事务执行插入命令，发现B进入了等待状态，原因是因为A的事务尚未提交，只能等待。此时，B可能会发生等待超时。</p><p><img src="serializable3.png" alt="serializable3.png"></p><p>A: 提交事务</p><p><img src="serializable4.png" alt="serializable4.png"></p><p>B: 发现插入成功</p><p><img src="serializable5.png" alt="serializable5.png"></p><p>serializable完全锁定字段，若一个事务来查询同一份数据就必须等待，知道前一个事务完成并解除锁定为止。是完整的隔离级别，会锁定对应的数据表格，所以效率不高。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;真正理解MySQL的四种隔离级别&lt;/center&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="alanngu.github.io/categories/MySQL/"/>
    
      <category term="Transaction" scheme="alanngu.github.io/categories/MySQL/Transaction/"/>
    
    
      <category term="MySQL" scheme="alanngu.github.io/tags/MySQL/"/>
    
      <category term="Transaction" scheme="alanngu.github.io/tags/Transaction/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Knownledge</title>
    <link href="alanngu.github.io/2018/11/09/MySQL%E7%9F%A5%E8%AF%86/"/>
    <id>alanngu.github.io/2018/11/09/MySQL%E7%9F%A5%E8%AF%86/</id>
    <published>2018-11-09T13:47:36.000Z</published>
    <updated>2020-05-21T14:12:37.308Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h4 id="示例SQL"><a href="#示例SQL" class="headerlink" title="示例SQL"></a>示例SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'自增主键'</span>,</span><br><span class="line">    <span class="keyword">num</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0'</span> <span class="keyword">comment</span> <span class="string">'数字'</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br></pre></td></tr></table></figure><p>如上的建表SQL中，出现了ENGINE = InnoDB AUTO_INCREMENT = 4 DEFAULT CHARSET = utf8；但不知道其含义是什么。</p><ol><li><p>InnoDB不就是MySQL的默认引擎吗？<br>此处不写也是可以的，这里写上可以清楚的知道在建表的时候使用了什么引擎。</p></li><li><p>主键已经设置了自增，这里的AUTO_INCREMENT有什么作用？<br>这里设置的数字的意思是想要这条语句在增长的时候，从4开始自增。</p></li><li><p>uft8在这里的作用是什么？<br>代表mysql建立数据库数据表是设定字符集为utf-8.</p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;MySQL小知识&lt;/center&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="alanngu.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="alanngu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Basic Doc</title>
    <link href="alanngu.github.io/2018/10/15/markdownDoc/"/>
    <id>alanngu.github.io/2018/10/15/markdownDoc/</id>
    <published>2018-10-15T12:51:28.000Z</published>
    <updated>2020-01-17T07:16:21.340Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri May 22 2020 16:53:36 GMT+0800 (GMT+08:00) --><h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#      一级标题</span><br><span class="line">##     二级标题</span><br><span class="line">###    三级标题</span><br><span class="line">####   四级标题</span><br><span class="line">#####  五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><hr><h3 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h3><h4 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h4><p><code>*斜体文本demo1*</code> <code>**粗体文本demo1**</code> <code>***斜粗体文本demo1***</code></p><p><code>_斜体文本demo2_</code> <code>__粗体文本demo2__</code> <code>___斜粗体文本demo2___</code></p><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><ul><li><em>斜体文字demo1</em> <strong>粗体文本demo1</strong> <strong><em>斜粗体文本demo1</em></strong></li><li><em>斜体文本demo2</em> <strong>粗体文本demo2</strong> <strong><em>斜粗体文本demo2</em></strong></li></ul><h4 id="Dividing-Line"><a href="#Dividing-Line" class="headerlink" title="Dividing Line"></a>Dividing Line</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、 ***</span><br><span class="line"><span class="number">2</span>、 * * *</span><br><span class="line"><span class="number">3</span>、 *****</span><br><span class="line"><span class="number">4</span>、 - - -</span><br><span class="line"><span class="number">5</span>、 ------------</span><br></pre></td></tr></table></figure><h4 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h4><p>在需要添加删除线的文字两端各添加两个波浪线<code>~~</code></p><p><code>~~testText~~</code> $\Rightarrow$ <del>testText</del></p><h4 id="Underline"><a href="#Underline" class="headerlink" title="Underline"></a>Underline</h4><p><code>&lt;u&gt;下划线文本&lt;/u&gt;</code> $\Rightarrow$ <u>下划线文本</u></p><hr><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><h4 id="Unordered"><a href="#Unordered" class="headerlink" title="Unordered"></a>Unordered</h4><p>无序列表可以使用<code>*</code> <code>+</code> <code>-</code>作为标记</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>第一条语句</span><br><span class="line"><span class="bullet">* </span>第二条语句</span><br><span class="line"><span class="bullet">* </span>第三条语句</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>第一条语句</span><br><span class="line"><span class="bullet">+ </span>第二条语句</span><br><span class="line"><span class="bullet">+ </span>第三条语句</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第一条语句</span><br><span class="line"><span class="bullet">- </span>第二条语句</span><br><span class="line"><span class="bullet">- </span>第三条语句</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><ul><li>第一条语句</li><li>第二条语句</li><li>第三条语句</li></ul><h4 id="Ordered"><a href="#Ordered" class="headerlink" title="Ordered"></a>Ordered</h4><p>有序列表使用数字并加上<code>.</code>来表示，注意点后有空格</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>第一项</span><br><span class="line"><span class="number">2.</span>第二项</span><br><span class="line"><span class="number">3.</span>第三项</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$ 显示效果$\Downarrow$ $\Downarrow$</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><hr><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;   java</span><br><span class="line"><span class="meta">&gt;&gt;</span>  java.lang</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; java.lang.Thread</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><blockquote><p>java</p><blockquote><p>java.lang</p><blockquote><p>java.lang.Thread</p></blockquote></blockquote></blockquote><hr><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><h4 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h4><p>如果要突出显示段落上的一个函数或者代码片段可以使用反引号（`）把它包起来</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`checkUserName`函数</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果如下$\Downarrow$$\Downarrow$<br><code>checkUserName()</code>函数</p><h4 id="Syntax-highlighting"><a href="#Syntax-highlighting" class="headerlink" title="Syntax highlighting"></a>Syntax highlighting</h4><p>代码区块使用四个空格或者一个Tab键<br>也可以使用```包裹一段代码，并指定一种语言.也可以不指定代码语言</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```<span class="javascript">javascript</span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'RUNOOB'</span>);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Welcome!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>链接使用方法如下：</p><ul><li><code>[google](http://www.google.com)</code> $\Rightarrow$ <a href="http://www.google.com" target="_blank" rel="noopener">google</a></li><li><code>www.google.com</code> $\Rightarrow$ <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></li></ul><p>这个链接使用变量代替<code>[google][1]</code>，并在文末添加此链接的地址<code>[1]:http://www.google.com</code> $\Rightarrow$ <a href="http://www.google.com" target="_blank" rel="noopener">google</a></p><hr><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>Markdown图片的基本语法格式如下：<br><code>![alt girl]（girl.png）</code> $\Rightarrow$ <img src="girl.png" alt="girl"><br>也可以像使用网址链接那样使用变量赋值<br><code>![alt girl][2]</code> $\Rightarrow$ <img src="girl.png" alt="alt girl"></p><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><p>Markdown制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。<br>语法格式如下</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> 表头 </span>|<span class="string"> 表头 </span>|<span class="string"> 表头 </span>|</span><br><span class="line">|<span class="string"> --- </span>|<span class="string"> ---  </span>|<span class="string"> --- </span>|</span><br><span class="line">|<span class="string">单元格</span>|<span class="string">单元格</span>|<span class="string">单元格</span>|</span><br><span class="line">|<span class="string">单元格</span>|<span class="string">单元格</span>|<span class="string">单元格</span>|</span><br></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><table><thead><tr><th>表头</th><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr></tbody></table><p>我们可以设置表格的对齐方式：</p><ul><li><code>-:</code> 设置内容和标题栏居右对齐</li><li><code>:-</code> 设置内容和标题栏居左对齐</li><li><code>:-:</code> 设置内容和标题栏居中对齐</li></ul><center>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</center><p><img src="table.png" alt="alt table"></p><hr><h3 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a>Reference Documents</h3><ul><li><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-tutorial.html</a></li><li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">https://guides.github.com/features/mastering-markdown/</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;center&gt;Markdown Basic Usage&lt;/center&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="alanngu.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="alanngu.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
